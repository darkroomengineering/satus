---
alwaysApply: true
---
---
description: Component creation guidelines
globs: *.tsx, *.jsx, *.css, *.js, *.ts
---

Third party integration guidelines

## Sanity CMS Integration

1. **Configuration & Setup**
   - Use CDN for performance with stega for visual editing
   - Store credentials securely in environment variables
   - All Sanity files are organized in `/integrations/sanity/` directory
   ```typescript
   // In integrations/sanity/client.ts
   export const client = createClient({
     projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,
     dataset: process.env.NEXT_PUBLIC_SANITY_DATASET,
     apiVersion: '2024-03-15',
     useCdn: true, // Use CDN for better performance
     token: process.env.SANITY_API_WRITE_TOKEN, // Write token for editing
     stega: {
       studioUrl: process.env.NEXT_PUBLIC_SANITY_STUDIO_URL || '/studio',
     },
   })
   ```

2. **Schema Management**
   - Use consistent naming conventions for schemas
   - Always include proper validation and descriptions
   - Implement custom previews for better UX
   ```typescript
   export const article = defineType({
     name: 'article',
     title: 'Article',
     type: 'document',
     fields: [
       defineField({
         name: 'title',
         title: 'Title',
         type: 'string',
         validation: (Rule) => Rule.required().max(60),
       }),
       defineField({
         name: 'slug',
         title: 'Slug',
         type: 'slug',
         options: { source: 'title', maxLength: 96 },
         validation: (Rule) => Rule.required(),
       }),
     ],
     preview: {
       select: { title: 'title', slug: 'slug.current' },
       prepare({ title, slug }) {
         return {
           title: title || 'Untitled',
           subtitle: slug ? `/${slug}` : 'No slug',
         }
       },
     },
   })
   ```

3. **Visual Editing**
   - Always add `data-sanity` attributes for visual editing
   - Use SanityContextProvider for document access
   - Implement proper draft mode handling
   - Import from `/integrations/sanity` directory
   ```typescript
   import { useSanityContext, RichText } from '~/integrations/sanity'
   
   export function MyComponent() {
     const { document } = useSanityContext()
     
     return (
       <div data-sanity={document._id}>
         <h1 data-sanity="title">{document.title}</h1>
         <div data-sanity="content">
           <RichText content={document.content} />
         </div>
       </div>
     )
   }
   ```

4. **Data Fetching**
   - Use proper perspective for draft vs published content
   - Implement caching strategies for performance
   - Handle errors gracefully with try-catch
   - Import from `/integrations/sanity` directory
   - **Use `~/libs/metadata` helpers for SEO optimization**
   ```typescript
   // In integrations/sanity/queries.ts
   import { client } from './client'
   import { generateSanityMetadata } from '~/libs/metadata'
   
   export async function fetchSanityPage(slug: string, isDraftMode = false) {
     try {
       const page = await client.fetch(
         pageQuery,
         { slug },
         isDraftMode
           ? {
               perspective: 'drafts',
               stega: true,
               cache: 'no-store',
             }
           : {
               next: { revalidate: 3600, tags: ['page', `page:${slug}`] },
             }
       )
       return { data: page, error: null }
     } catch (error) {
       console.error('fetchSanityPage error:', error)
       return { data: null, error }
     }
   }
   
   // In page.tsx for SEO
   export async function generateMetadata({ params }) {
     const { data } = await fetchSanityPage(params.slug)
     return generateSanityMetadata(data)
   }
   ```

5. **GROQ Queries**
   - Use projections to fetch only needed data
   - Implement proper filtering and sorting
   - Use fragments for reusable query parts
   - Store in `/integrations/sanity/queries.ts`
   ```typescript
   // In integrations/sanity/queries.ts
   import { groq } from 'next-sanity'
   
   export const pageQuery = groq`
     *[_type == "page" && slug.current == $slug][0] {
       _id,
       title,
       slug,
       content,
       "imageUrl": image.asset->url,
       _updatedAt
     }
   `
   ```

6. **Performance Optimization**
   - Use ISR for static content with revalidation
   - Implement proper cache invalidation via webhooks
   - Optimize images with proper sizing
   - Use consolidated imports for better tree-shaking
   - **Use metadata helpers for consistent SEO**
   ```typescript
   import { urlForImage } from '~/integrations/sanity'
   import { generateSanityMetadata } from '~/libs/metadata'
   
   // Use ISR for published content
   export const revalidate = 3600
   
   // Optimize images
   <SanityImage image={document.image} maxWidth={1200} />
   
   // Generate SEO metadata
   export async function generateMetadata({ params }) {
     const page = await fetchSanityPage(params.slug)
     return generateSanityMetadata(page, {
       title: page.seo?.title || page.title,
       description: page.seo?.description,
       image: page.seo?.image || page.image,
       noIndex: page.seo?.noIndex,
     })
   }
   ```

 7. **Project Structure**
   - All Sanity files are organized in `/integrations/sanity/` directory
   - Configuration files: `sanity.config.ts`, `sanity.cli.ts`
   - Schema definitions: `schemaTypes/`
   - Integration code: `client.ts`, `queries.ts`, `components/`, `utils/`
   ```
   integrations/sanity/
   ├── sanity.cli.ts           # CLI configuration
   ├── sanity.config.ts        # Studio configuration
   ├── env.ts                  # Environment variables
   ├── structure.ts            # Studio structure
   ├── client.ts               # Sanity client
   ├── queries.ts              # GROQ queries and fetch functions
   ├── index.ts                # Main exports
   ├── README.md               # Documentation
   ├── schemaTypes/            # Content type definitions
   ├── components/             # React components
   │   ├── context.tsx         # React context
   │   └── rich-text.tsx       # Rich text component
   └── utils/
       └── image.ts            # Image utilities
   ```

## Shopify Integration

1. **API Configuration**
   - Use GraphQL for queries
   - Store credentials securely
   ```typescript
   const shopifyClient = createShopifyClient({
     domain: process.env.SHOPIFY_DOMAIN,
     storefrontAccessToken: process.env.SHOPIFY_STOREFRONT_TOKEN
   })
   ```

2. **Product Management**
   - Use fragments for reusable queries
   - Implement proper error handling
   ```typescript
   import { PRODUCT_FRAGMENT } from '~/integrations/shopify/fragments'
   ```

3. **Cart Operations**
   - Use mutations for cart operations
   - Maintain cart state with Zustand
   ```typescript
   import { ADD_TO_CART } from '~/integrations/shopify/mutations'
   ```

## Hubspot Forms

1. **Form Integration**
   - Use Server Actions for submissions
   - Validate data server-side
   ```typescript
   export async function submitToHubspot(formData: FormData) {
     'use server'
     const client = new HubspotClient({
       accessToken: process.env.HUBSPOT_ACCESS_TOKEN
     })
     // submission logic
   }
   ```

2. **Newsletter Subscriptions**
   - Implement proper consent management
   - Handle errors gracefully
   ```typescript
   import { HubspotNewsletterAction } from '~/integrations/hubspot/action'
   ```

## General Integration Best Practices

1. **Environment Variables**
   - Never commit API keys
   - Use `.env.local` for development
   - Document required variables in `.env.example`
   - Use `~/libs/validate-env` for runtime validation
   ```typescript
   import { validateEnv } from '~/libs/validate-env'
   
   // Validate required env vars on startup
   validateEnv(['NEXT_PUBLIC_API_KEY', 'API_SECRET'])
   ```

2. **API Resilience**
   - **Always use `fetchWithTimeout` for external API calls**
   - Standard timeouts: 8-10 seconds for most integrations
   - Implement proper error handling and retry logic
   ```typescript
   import { fetchWithTimeout } from '~/libs/fetch-with-timeout'
   
   // HubSpot: 8 seconds
   const response = await fetchWithTimeout(url, options, 8000)
   
   // Mailchimp: 10 seconds
   const response = await fetchWithTimeout(url, options, 10000)
   
   // Turnstile verification: 5 seconds
   const response = await fetchWithTimeout(verifyUrl, options, 5000)
   ```

3. **Error Handling**
   - Implement timeout handling for all API calls
   - Provide user-friendly error messages
   - Log errors for debugging with context
   ```typescript
   try {
     const response = await fetchWithTimeout(url, options, 10000)
     return { data: await response.json(), error: null }
   } catch (error) {
     console.error('API call failed:', error)
     return { data: null, error: error.message }
   }
   ```

4. **Type Safety**
   - Generate TypeScript types from APIs when possible
   - Use proper validation (e.g., Zod schemas)
   ```typescript
   import { z } from 'zod'
   
   const ProductSchema = z.object({
     id: z.string(),
     title: z.string(),
     price: z.number()
   })
   ```

5. **Performance**
   - Cache API responses appropriately
   - Use ISR (Incremental Static Regeneration) for dynamic content
   - Implement proper loading states

6. **Security**
   - Validate all user inputs
   - Use server-side API calls for sensitive operations
   - Implement rate limiting where necessary

7. **Integration Management**
   - Use `~/libs/cleanup-integrations` to remove unused integration code
   - Check integration usage with `~/integrations/check-integration`
   - Keep only active integrations to optimize bundle size

## Webhook Handling

1. **Verification**
   - Always verify webhook signatures
   - Use proper authentication
   ```typescript
   export async function verifyWebhookSignature(
     payload: string,
     signature: string
   ): Promise<boolean> {
     // verification logic
   }
   ```

2. **Processing**
   - Process webhooks asynchronously
   - Implement idempotency
   - Return 200 status quickly


Last updated: 2025-06-01 