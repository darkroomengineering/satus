Third party integration guidelines

## Sanity CMS Integration

1. **Configuration & Setup**
   - Use CDN for performance with stega for visual editing
   - Store credentials securely in environment variables
   ```typescript
   export const client = createClient({
     projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,
     dataset: process.env.NEXT_PUBLIC_SANITY_DATASET,
     apiVersion: '2024-03-15',
     useCdn: true, // Use CDN for better performance
     token: process.env.SANITY_API_WRITE_TOKEN, // Write token for editing
     stega: {
       studioUrl: process.env.NEXT_PUBLIC_SANITY_STUDIO_URL || '/studio',
     },
   })
   ```

2. **Schema Management**
   - Use consistent naming conventions for schemas
   - Always include proper validation and descriptions
   - Implement custom previews for better UX
   ```typescript
   export const article = defineType({
     name: 'article',
     title: 'Article',
     type: 'document',
     fields: [
       defineField({
         name: 'title',
         title: 'Title',
         type: 'string',
         validation: (Rule) => Rule.required().max(60),
       }),
       defineField({
         name: 'slug',
         title: 'Slug',
         type: 'slug',
         options: { source: 'title', maxLength: 96 },
         validation: (Rule) => Rule.required(),
       }),
     ],
     preview: {
       select: { title: 'title', slug: 'slug.current' },
       prepare({ title, slug }) {
         return {
           title: title || 'Untitled',
           subtitle: slug ? `/${slug}` : 'No slug',
         }
       },
     },
   })
   ```

3. **Visual Editing**
   - Always add `data-sanity` attributes for visual editing
   - Use SanityContextProvider for document access
   - Implement proper draft mode handling
   ```typescript
   export function MyComponent() {
     const { document } = useSanityContext()
     
     return (
       <div data-sanity={document._id}>
         <h1 data-sanity="title">{document.title}</h1>
         <div data-sanity="content">
           <RichText content={document.content} />
         </div>
       </div>
     )
   }
   ```

4. **Data Fetching**
   - Use proper perspective for draft vs published content
   - Implement caching strategies for performance
   - Handle errors gracefully with try-catch
   ```typescript
   export async function fetchSanityPage(slug: string, isDraftMode = false) {
     try {
       const page = await client.fetch(
         pageQuery,
         { slug },
         isDraftMode
           ? {
               perspective: 'previewDrafts',
               stega: true,
               cache: 'no-store',
             }
           : {
               next: { revalidate: 3600, tags: ['page', `page:${slug}`] },
             }
       )
       return { data: page, error: null }
     } catch (error) {
       console.error('fetchSanityPage error:', error)
       return { data: null, error }
     }
   }
   ```

5. **GROQ Queries**
   - Use projections to fetch only needed data
   - Implement proper filtering and sorting
   - Use fragments for reusable query parts
   ```typescript
   export const pageQuery = groq`
     *[_type == "page" && slug.current == $slug][0] {
       _id,
       title,
       slug,
       content,
       "imageUrl": image.asset->url,
       _updatedAt
     }
   `
   ```

6. **Performance Optimization**
   - Use ISR for static content with revalidation
   - Implement proper cache invalidation via webhooks
   - Optimize images with proper sizing
   ```typescript
   // Use ISR for published content
   export const revalidate = 3600
   
   // Optimize images
   <SanityImage image={document.image} maxWidth={1200} />
   ```

 7. **Presentation Tool Configuration**
    - Configure routes properly to avoid conflicts
    - Use defined() filters for documents with slugs
    - Implement proper location resolvers
    - Configuration files are located in `/sanity/` directory
    ```typescript
    // In sanity/sanity.config.ts
    presentationTool({
      resolve: {
        mainDocuments: [
          {
            route: '/pages/:slug',
            filter: `_type == "page" && slug.current == $slug && defined(slug.current)`,
          },
        ],
        locations: {
          page: {
            select: { title: 'title', slug: 'slug.current' },
            resolve: (doc) => {
              if (!doc?.slug) return null
              return {
                locations: [
                  {
                    title: doc?.title || 'Untitled Page',
                    href: `/pages/${doc.slug}`,
                  },
                ],
              }
            },
          },
        },
      },
    })
    ```

## Shopify Integration

1. **API Configuration**
   - Use GraphQL for queries
   - Store credentials securely
   ```typescript
   const shopifyClient = createShopifyClient({
     domain: process.env.SHOPIFY_DOMAIN,
     storefrontAccessToken: process.env.SHOPIFY_STOREFRONT_TOKEN
   })
   ```

2. **Product Management**
   - Use fragments for reusable queries
   - Implement proper error handling
   ```typescript
   import { PRODUCT_FRAGMENT } from '~/integrations/shopify/fragments'
   ```

3. **Cart Operations**
   - Use mutations for cart operations
   - Maintain cart state with Zustand
   ```typescript
   import { ADD_TO_CART } from '~/integrations/shopify/mutations'
   ```

## Hubspot Forms

1. **Form Integration**
   - Use Server Actions for submissions
   - Validate data server-side
   ```typescript
   export async function submitToHubspot(formData: FormData) {
     'use server'
     const client = new HubspotClient({
       accessToken: process.env.HUBSPOT_ACCESS_TOKEN
     })
     // submission logic
   }
   ```

2. **Newsletter Subscriptions**
   - Implement proper consent management
   - Handle errors gracefully
   ```typescript
   import { HubspotNewsletterAction } from '~/integrations/hubspot/action'
   ```

## General Integration Best Practices

1. **Environment Variables**
   - Never commit API keys
   - Use `.env.local` for development
   - Document required variables in `.env.example`

2. **Error Handling**
   - Implement retry logic for API calls
   - Provide user-friendly error messages
   - Log errors for debugging

3. **Type Safety**
   - Generate TypeScript types from APIs when possible
   - Use proper validation (e.g., Zod schemas)
   ```typescript
   import { z } from 'zod'
   
   const ProductSchema = z.object({
     id: z.string(),
     title: z.string(),
     price: z.number()
   })
   ```

4. **Performance**
   - Cache API responses appropriately
   - Use ISR (Incremental Static Regeneration) for dynamic content
   - Implement proper loading states

5. **Security**
   - Validate all user inputs
   - Use server-side API calls for sensitive operations
   - Implement rate limiting where necessary

## Webhook Handling

1. **Verification**
   - Always verify webhook signatures
   - Use proper authentication
   ```typescript
   export async function verifyWebhookSignature(
     payload: string,
     signature: string
   ): Promise<boolean> {
     // verification logic
   }
   ```

2. **Processing**
   - Process webhooks asynchronously
   - Implement idempotency
   - Return 200 status quickly

Last updated: 2025-01-08


   - Implement idempotency
   - Return 200 status quickly
