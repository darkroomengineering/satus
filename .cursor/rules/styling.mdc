---
alwaysApply: true
---
---
description: Styling guidelines
globs: *.tsx, *.jsx, *.css, *.js, *.ts
---

## CSS Modules

1. **File Naming**
   - Use kebab-case for CSS module files
   - Match the component name followed by `.module.css`
   ```
   button.tsx
   button.module.css
   ```

2. **Class Naming**
   - Use camelCase for class names
   - Use descriptive, semantic names
   ```css
   .button { /* Base styles */ }
   .isPrimary { /* Variant styles */ }
   .isDisabled { /* State styles */ }
   ```

3. **Imports in Components**
   - Always import CSS modules as `s`
   ```tsx
   import s from './component-name.module.css'
   
   function Component() {
     return <div className={s.wrapper} />
   }
   ```

## Responsive Design

1. **Viewport Functions**
   - Use custom viewport functions for responsive sizing
   ```css
   .element {
     width: mobile-vw(150);      /* 150px at mobile viewport */
     height: mobile-vh(100);     /* 100px at mobile viewport */
     margin: desktop-vw(50);     /* 50px at desktop viewport */
     padding: desktop-vh(25);    /* 25px at desktop viewport */
   }
   ```

2. **Breakpoints**
   - Desktop breakpoint: 800px (defined in styles/config.ts)
   ```css
   @media (min-width: 800px) {
     /* Desktop styles */
   }
   ```

3. **Grid System**
   - Use the column function for grid-based layouts
   ```css
   .container {
     width: columns(6);          /* Span 6 columns */
     margin-left: columns(1);    /* Offset by 1 column */
   }
   ```

## Typography

1. **Font Hierarchy**
   - Use typography variables from the theme
   ```css
   .title {
     font-size: var(--font-size-title);
     line-height: var(--line-height-title);
     font-weight: var(--font-weight-bold);
   }
   ```

2. **Text Scaling**
   - Use scale utilities with the 's' prefix
   ```css
   .scalingText {
     --size: 1;
     font-size: s(var(--size) * 16px);   /* Scales appropriately */
   }
   ```

## Colors and Themes

1. **Color Variables**
   - Use theme colors from CSS variables
   ```css
   .element {
     color: var(--color-text);
     background-color: var(--color-background);
     border-color: var(--color-accent);
   }
   ```

2. **Theme Switching**
   - Use theme-specific variables when needed
   ```css
   .element {
     color: var(--theme-dark-text);
     background-color: var(--theme-dark-background);
   }
   
   [data-theme="light"] .element {
     color: var(--theme-light-text);
     background-color: var(--theme-light-background);
   }
   ```

## Animations and Transitions

1. **Transition Timing**
   - Use consistent transition variables
   ```css
   .element {
     transition: opacity var(--transition-duration) var(--transition-ease);
   }
   ```

2. **Animation Easings**
   - Import easings from the theme
   ```css
   .element {
     transition: transform 0.5s var(--ease-out-expo);
   }
   ```

## Best Practices

1. **Performance**
   - Prefer CPU-friendly properties (transform, opacity)
   - Use `will-change` sparingly and only when needed
   ```css
   .animatedElement {
     will-change: transform, opacity;
   }
   ```

2. **Organization**
   - Group related properties together
   - Order properties consistently
   ```css
   .element {
     /* Positioning */
     position: absolute;
     top: 0;
     left: 0;
     z-index: 1;
     
     /* Box model */
     display: flex;
     width: 100%;
     padding: 1rem;
     
     /* Visual */
     background-color: var(--color-background);
     border-radius: 4px;
     
     /* Typography */
     font-size: 1rem;
     color: var(--color-text);
     
     /* Animation */
     transition: all 0.3s ease;
   }
   ```

## Project-Specific Custom Utilities

The project includes a set of custom utility classes and functions generated by scripts in `styles/scripts`. These are available globally in all CSS:

### Custom Utility Classes (`dr-*`)
- **Scaling Utilities** (responsive to device width):
  - `dr-text-*` — font-size
  - `dr-tracking-*` — letter-spacing
  - `dr-leading-*` — line-height
  - `dr-border-*`, `dr-border-t-*`, `dr-border-r-*`, `dr-border-b-*`, `dr-border-l-*` — border widths
  - `dr-rounded-*`, `dr-rounded-t-*`, `dr-rounded-r-*`, `dr-rounded-b-*`, `dr-rounded-l-*`, `dr-rounded-tl-*`, `dr-rounded-tr-*`, `dr-rounded-br-*`, `dr-rounded-bl-*` — border radii

- **Column-Based Sizing Utilities** (responsive to grid columns):
  - `dr-w-col-*`, `dr-min-w-col-*`, `dr-max-w-col-*` — width, min-width, max-width by columns
  - `dr-h-col-*`, `dr-min-h-col-*`, `dr-max-h-col-*` — height, min-height, max-height by columns
  - `dr-gap-col-*`, `dr-gap-x-col-*`, `dr-gap-y-col-*` — grid gaps by columns
  - `dr-p-col-*`, `dr-px-col-*`, `dr-py-col-*`, `dr-pt-col-*`, `dr-pr-col-*`, `dr-pl-col-*`, `dr-pb-col-*` — padding by columns
  - `dr-m-col-*`, `dr-mx-col-*`, `dr-my-col-*`, `dr-mt-col-*`, `dr-mr-col-*`, `dr-ml-col-*`, `dr-mb-col-*` — margin by columns

- **Standard Sizing Utilities** (responsive to device width):
  - `dr-w-*`, `dr-min-w-*`, `dr-max-w-*` — width, min-width, max-width
  - `dr-h-*`, `dr-min-h-*`, `dr-max-h-*` — height, min-height, max-height
  - `dr-gap-*`, `dr-gap-x-*`, `dr-gap-y-*` — grid gaps
  - `dr-p-*`, `dr-px-*`, `dr-py-*`, `dr-pt-*`, `dr-pr-*`, `dr-pl-*`, `dr-pb-*` — padding
  - `dr-m-*`, `dr-mx-*`, `dr-my-*`, `dr-mt-*`, `dr-mr-*`, `dr-ml-*`, `dr-mb-*` — margin
  - `dr-top-*`, `dr-right-*`, `dr-bottom-*`, `dr-left-*`, `dr-inset-*`, `dr-inset-x-*`, `dr-inset-y-*` — positioning

- **Layout and Grid Utilities:**
  - `dr-grid` — sets display: grid and grid-template-columns based on project columns
  - `dr-layout-block` — sets margin-inline and width for layout blocks
  - `dr-layout-block-inner` — sets padding-inline and width for inner layout blocks
  - `dr-layout-grid` — combines layout block and grid
  - `dr-layout-grid-inner` — combines inner layout block and grid
  - `desktop-only` — hides element on mobile
  - `mobile-only` — hides element on desktop

### Custom PostCSS Functions
- `mobile-vw(pixels)` — converts pixels to viewport width for mobile
- `mobile-vh(pixels)` — converts pixels to viewport height for mobile
- `desktop-vw(pixels)` — converts pixels to viewport width for desktop
- `desktop-vh(pixels)` — converts pixels to viewport height for desktop
- `columns(n)` — calculates width based on number of grid columns

> **Note:** These utilities and functions are generated by project scripts and may differ from standard Tailwind or CSS. Always check `/styles/css/tailwind.css` for the latest generated classes. 