---
alwaysApply: true
---
---
description: CSS Modules, Tailwind CSS v4, and responsive design patterns
globs: *.tsx, *.jsx, *.css, *.js, *.ts
---

# Styling Guidelines

## CSS Modules

### File Naming
Use kebab-case for CSS module files. Match the component name followed by `.module.css`

```
button.tsx
button.module.css
```

### Class Naming
Use camelCase for class names. Use descriptive, semantic names.

```css
.button { /* Base styles */ }
.isPrimary { /* Variant styles */ }
.isDisabled { /* State styles */ }
```

### Imports in Components
Always import CSS modules as `s`

```tsx
import s from './component-name.module.css'

function Component() {
  return <div className={s.wrapper} />
}
```

## Responsive Design

### Viewport Functions
Use custom viewport functions for responsive sizing

```css
.element {
  width: mobile-vw(150);      /* 150px at mobile viewport */
  height: mobile-vh(100);     /* 100px at mobile viewport */
  margin: desktop-vw(50);     /* 50px at desktop viewport */
  padding: desktop-vh(25);    /* 25px at desktop viewport */
}
```

### Breakpoints
Desktop breakpoint: 800px (defined in styles/config.ts)

```css
@media (min-width: 800px) {
  /* Desktop styles */
}
```

### Grid System
Use the column function for grid-based layouts

```css
.container {
  width: columns(6);          /* Span 6 columns */
  margin-left: columns(1);    /* Offset by 1 column */
}
```

## Typography

### Font Hierarchy
Use typography variables from the theme

```css
.title {
  font-size: var(--font-size-title);
  line-height: var(--line-height-title);
  font-weight: var(--font-weight-bold);
}
```

### Text Scaling
Use scale utilities with the 's' prefix

```css
.scalingText {
  --size: 1;
  font-size: s(var(--size) * 16px);   /* Scales appropriately */
}
```

## Colors and Themes

### Color Variables
Use theme colors from CSS variables

```css
.element {
  color: var(--color-text);
  background-color: var(--color-background);
  border-color: var(--color-accent);
}
```

### Theme Switching
Use theme-specific variables when needed

```css
.element {
  color: var(--theme-dark-text);
  background-color: var(--theme-dark-background);
}

[data-theme="light"] .element {
  color: var(--theme-light-text);
  background-color: var(--theme-light-background);
}
```

## Animations and Transitions

### Transition Timing
Use consistent transition variables

```css
.element {
  transition: opacity var(--transition-duration) var(--transition-ease);
}
```

### Animation Easings
Import easings from the theme

```css
.element {
  transition: transform 0.5s var(--ease-out-expo);
}
```

## Best Practices

### Performance
Prefer CPU-friendly properties (transform, opacity). Use `will-change` sparingly and only when needed.

```css
.animatedElement {
  will-change: transform, opacity;
}
```

### Organization
Group related properties together. Order properties consistently.

```css
.element {
  /* Positioning */
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
  
  /* Box model */
  display: flex;
  width: 100%;
  padding: 1rem;
  
  /* Visual */
  background-color: var(--color-background);
  border-radius: 4px;
  
  /* Typography */
  font-size: 1rem;
  color: var(--color-text);
  
  /* Animation */
  transition: all 0.3s ease;
}
```

---

# Tailwind CSS v4

## Core Changes

### CSS-first configuration
Configuration is now done in CSS instead of JavaScript. Use `@theme` directive in CSS instead of `tailwind.config.js`

```css
@import "tailwindcss";

@theme {
  --font-display: "Satoshi", "sans-serif";
  --breakpoint-3xl: 1920px;
  --color-avocado-500: oklch(0.84 0.18 117.33);
  --ease-fluid: cubic-bezier(0.3, 0, 0, 1);
}
```

### CSS import syntax
Use `@import "tailwindcss"` instead of `@tailwind` directives

- Old: `@tailwind base; @tailwind components; @tailwind utilities;`
- New: `@import "tailwindcss";`

### Package changes
- PostCSS plugin is now `@tailwindcss/postcss` (not `tailwindcss`)
- CLI is now `@tailwindcss/cli`
- Vite plugin is `@tailwindcss/vite`
- No need for `postcss-import` or `autoprefixer` anymore

### Native CSS cascade layers
Uses real CSS `@layer` instead of Tailwind's custom implementation

## Theme Configuration

### CSS theme variables
All design tokens are available as CSS variables

- Namespace format: `--category-name` (e.g., `--color-blue-500`, `--font-sans`)
- Access in CSS: `var(--color-blue-500)`
- Available namespaces:
  - `--color-*` : Color utilities like `bg-red-500` and `text-sky-300`
  - `--font-*` : Font family utilities like `font-sans`
  - `--text-*` : Font size utilities like `text-xl`
  - `--font-weight-*` : Font weight utilities like `font-bold`
  - `--tracking-*` : Letter spacing utilities like `tracking-wide`
  - `--leading-*` : Line height utilities like `leading-tight`
  - `--breakpoint-*` : Responsive breakpoint variants like `sm:*`
  - `--container-*` : Container query variants like `@sm:*` and size utilities like `max-w-md`
  - `--spacing-*` : Spacing and sizing utilities like `px-4` and `max-h-16`
  - `--radius-*` : Border radius utilities like `rounded-sm`
  - `--shadow-*` : Box shadow utilities like `shadow-md`
  - `--inset-shadow-*` : Inset box shadow utilities like `inset-shadow-xs`
  - `--drop-shadow-*` : Drop shadow filter utilities like `drop-shadow-md`
  - `--blur-*` : Blur filter utilities like `blur-md`
  - `--perspective-*` : Perspective utilities like `perspective-near`
  - `--aspect-*` : Aspect ratio utilities like `aspect-video`
  - `--ease-*` : Transition timing function utilities like `ease-out`
  - `--animate-*` : Animation utilities like `animate-spin`

### Simplified theme configuration
Many utilities no longer need theme configuration

- Utilities like `grid-cols-12`, `z-40`, and `opacity-70` work without configuration
- Data attributes like `data-selected:opacity-100` don't need configuration

### Dynamic spacing scale
Derived from a single spacing value

- Default: `--spacing: 0.25rem`
- Every multiple of the base value is available (e.g., `mt-21` works automatically)

### Overriding theme namespaces
- Override entire namespace: `--font-*: initial;`
- Override entire theme: `--*: initial;`

## New Features

### Container query support
Built-in now, no plugin needed

- `@container` for container context
- `@sm:`, `@md:`, etc. for container-based breakpoints
- `@max-md:` for max-width container queries
- Combine with `@min-md:@max-xl:hidden` for ranges

### 3D transforms
- `transform-3d` enables 3D transforms
- `rotate-x-*`, `rotate-y-*`, `rotate-z-*` for 3D rotation
- `scale-z-*` for z-axis scaling
- `translate-z-*` for z-axis translation
- `perspective-*` utilities (`perspective-near`, `perspective-distant`, etc.)
- `perspective-origin-*` utilities
- `backface-visible` and `backface-hidden`

### Gradient enhancements
- Linear gradient angles: `bg-linear-45` (renamed from `bg-gradient-*`)
- Gradient interpolation: `bg-linear-to-r/oklch`, `bg-linear-to-r/srgb`
- Conic and radial gradients: `bg-conic`, `bg-radial-[at_25%_25%]`

### Shadow enhancements
- `inset-shadow-*` and `inset-ring-*` utilities
- Can be composed with regular `shadow-*` and `ring-*`

### New CSS property utilities
- `field-sizing-content` for auto-resizing textareas
- `scheme-light`, `scheme-dark` for `color-scheme` property
- `font-stretch-*` utilities for variable fonts

## New Variants

### Composable variants
Chain variants together

```tsx
// Example: group-has-data-potato:opacity-100
```

### New variants
- `starting` variant for `@starting-style` transitions
- `not-*` variant for `:not()` pseudo-class
- `inert` variant for `inert` attribute
- `nth-*` variants (`nth-3:`, `nth-last-5:`, `nth-of-type-4:`, `nth-last-of-type-6:`)
- `in-*` variant (like `group-*` but without adding `group` class)
- `open` variant now supports `:popover-open`
- `**` variant for targeting all descendants

## Custom Extensions

### Custom utilities
Use `@utility` directive

```css
@utility tab-4 {
  tab-size: 4;
}
```

### Custom variants
Use `@variant` directive

```css
@variant pointer-coarse (@media (pointer: coarse));
@variant theme-midnight (&:where([data-theme="midnight"] *));
```

### Plugins
Use `@plugin` directive

```css
@plugin "@tailwindcss/typography";
```

## Breaking Changes

### Removed deprecated utilities
- `bg-opacity-*` → Use `bg-black/50` instead
- `text-opacity-*` → Use `text-black/50` instead
- And others: `border-opacity-*`, `divide-opacity-*`, etc.

### Renamed utilities
- `shadow-sm` → `shadow-xs` (and `shadow` → `shadow-sm`)
- `drop-shadow-sm` → `drop-shadow-xs` (and `drop-shadow` → `drop-shadow-sm`)
- `blur-sm` → `blur-xs` (and `blur` → `blur-sm`)
- `rounded-sm` → `rounded-xs` (and `rounded` → `rounded-sm`)
- `outline-none` → `outline-hidden` (for the old behavior)

### Default style changes
- Default border color is now `currentColor` (was `gray-200`)
- Default `ring` width is now 1px (was 3px)
- Placeholder text now uses current color at 50% opacity (was `gray-400`)
- Hover styles only apply on devices that support hover (`@media (hover: hover)`)

### Syntax changes
- CSS variables in arbitrary values: `bg-(--brand-color)` instead of `bg-[--brand-color]`
- Stacked variants now apply left-to-right (not right-to-left)
- Use CSS variables instead of `theme()` function 

## Advanced Configuration

### Using a prefix

```css
@import "tailwindcss" prefix(tw);
```

Results in classes like `tw:flex`, `tw:bg-red-500`, `tw:hover:bg-red-600`

### Source detection
- Automatic by default (ignores `.gitignore` files and binary files)
- Add sources: `@source "../node_modules/@my-company/ui-lib";`
- Disable automatic detection: `@import "tailwindcss" source(none);`

### Legacy config files

```css
@import "tailwindcss";
@config "../../tailwind.config.js";
```

### Dark mode configuration

```css
@import "tailwindcss";
@variant dark (&:where(.dark, .dark *));
```

### Container customization
Extend with `@utility`

```css
@utility container {
  margin-inline: auto;
  padding-inline: 2rem;
}
```

### Using `@apply` in Vue/Svelte

```html
<style>
  @import "../../my-theme.css" theme(reference);
  /* or */
  @import "tailwindcss/theme" theme(reference);
  
  h1 {
    @apply font-bold text-2xl text-red-500;
  }
</style>
```

---

# Project-Specific Custom Utilities

The project includes custom utility classes and functions generated by scripts in `styles/scripts`. These are available globally in all CSS.

## Custom Utility Classes (`dr-*`)

### Scaling Utilities (responsive to device width)
- `dr-text-*` — font-size
- `dr-tracking-*` — letter-spacing
- `dr-leading-*` — line-height
- `dr-border-*`, `dr-border-t-*`, `dr-border-r-*`, `dr-border-b-*`, `dr-border-l-*` — border widths
- `dr-rounded-*`, `dr-rounded-t-*`, `dr-rounded-r-*`, `dr-rounded-b-*`, `dr-rounded-l-*`, `dr-rounded-tl-*`, `dr-rounded-tr-*`, `dr-rounded-br-*`, `dr-rounded-bl-*` — border radii

### Column-Based Sizing Utilities (responsive to grid columns)
- `dr-w-col-*`, `dr-min-w-col-*`, `dr-max-w-col-*` — width, min-width, max-width by columns
- `dr-h-col-*`, `dr-min-h-col-*`, `dr-max-h-col-*` — height, min-height, max-height by columns
- `dr-gap-col-*`, `dr-gap-x-col-*`, `dr-gap-y-col-*` — grid gaps by columns
- `dr-p-col-*`, `dr-px-col-*`, `dr-py-col-*`, `dr-pt-col-*`, `dr-pr-col-*`, `dr-pl-col-*`, `dr-pb-col-*` — padding by columns
- `dr-m-col-*`, `dr-mx-col-*`, `dr-my-col-*`, `dr-mt-col-*`, `dr-mr-col-*`, `dr-ml-col-*`, `dr-mb-col-*` — margin by columns

### Standard Sizing Utilities (responsive to device width)
- `dr-w-*`, `dr-min-w-*`, `dr-max-w-*` — width, min-width, max-width
- `dr-h-*`, `dr-min-h-*`, `dr-max-h-*` — height, min-height, max-height
- `dr-gap-*`, `dr-gap-x-*`, `dr-gap-y-*` — grid gaps
- `dr-p-*`, `dr-px-*`, `dr-py-*`, `dr-pt-*`, `dr-pr-*`, `dr-pl-*`, `dr-pb-*` — padding
- `dr-m-*`, `dr-mx-*`, `dr-my-*`, `dr-mt-*`, `dr-mr-*`, `dr-ml-*`, `dr-mb-*` — margin
- `dr-top-*`, `dr-right-*`, `dr-bottom-*`, `dr-left-*`, `dr-inset-*`, `dr-inset-x-*`, `dr-inset-y-*` — positioning

### Layout and Grid Utilities
- `dr-grid` — sets display: grid and grid-template-columns based on project columns
- `dr-layout-block` — sets margin-inline and width for layout blocks
- `dr-layout-block-inner` — sets padding-inline and width for inner layout blocks
- `dr-layout-grid` — combines layout block and grid
- `dr-layout-grid-inner` — combines inner layout block and grid
- `desktop-only` — hides element on mobile
- `mobile-only` — hides element on desktop

## Custom PostCSS Functions
- `mobile-vw(pixels)` — converts pixels to viewport width for mobile
- `mobile-vh(pixels)` — converts pixels to viewport height for mobile
- `desktop-vw(pixels)` — converts pixels to viewport width for desktop
- `desktop-vh(pixels)` — converts pixels to viewport height for desktop
- `columns(n)` — calculates width based on number of grid columns

## Theme and Utility Generation
The theme, utilities, and variants are generated from project config and may differ from vanilla Tailwind. Always check `/styles/css/tailwind.css` for the latest generated classes.

Last updated: 2025-10-07
